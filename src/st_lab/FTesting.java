/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package st_lab;

import java.awt.Dimension;
import java.awt.Toolkit;
import static java.lang.Math.pow;
import java.util.List;
import javax.swing.ImageIcon;

/**
 * @author bishu
 */
public class FTesting extends javax.swing.JFrame {

    private LEX t = new LEX();
    private print p = new print();
    private EXE E = new EXE();

    /**
     * Creates new form FTesting
     */
    public FTesting() {
        initComponents();
        ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\src\\icons\\test_icon.gif");
        setIconImage(icon.getImage());
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        data = new javax.swing.JTable();
        head = new javax.swing.JLabel();
        source = new javax.swing.JLabel();
        cases = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        data.setCellSelectionEnabled(true);
        data.setFillsViewportHeight(true);
        data.setRowHeight(24);
        data.setSelectionBackground(new java.awt.Color(153, 153, 255));
        data.setSelectionForeground(new java.awt.Color(0, 0, 0));
        data.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(data);

        head.setFont(new java.awt.Font("Consolas", 1, 16)); // NOI18N
        head.setText("Boundary Value Analysis");

        source.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        source.setText("Source File: ");

        cases.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        cases.setText("Total Number of cases: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(source, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cases, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE))
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(head, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(173, 173, 173))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(head, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cases, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setLex(LEX lex) {
        t = lex;
        source.setText(source.getText() + t.getFile());
        E.setFile(t.getFileType());
    }

    private void setOutput(Object obj[][], int n, int b) {
        try {
            int j;
            String s;
            for (int i = 0; i < n; i++) {
                E.init();
                for (j = 1; j <= b; j++) {
                    E.giveInput(obj[i][j] + "\n");
                    //System.out.print(obj[i][j] + " ");
                }
                E.stdinClose();
                s = E.getOutput();
                obj[i][j] = s;
                //System.out.println(s);
                if (obj[i][j] == "") {
                    obj[i][j] = "Invalid Input";
                }
                E.processWait();
                //System.out.println("");
            }
        } catch (Exception e) {
            System.out.println(e + " in setOutput()");
        }
    }

    private void setOutputList(List<String> lst, Object obj[][], int n, int b) {
        try {
            int j;
            String s;
            for (int i = 0; i < n; i++) {
                E.init();
                E.giveInput(lst.get(i));
                //System.out.print(obj[i][j] + " ");
                E.stdinClose();
                s = E.getOutput();
                if (s == "") {
                    s = "Invalid Input";
                }
                //System.out.println("s: " + s);

                obj[i] = ((i + 1) + ". " + lst.get(i).concat("o")).split("\\s+");
                //System.out.println("obj[i].len: "+obj[i].length);
                obj[i][obj[i].length - 1] = s;
                E.processWait();
                //System.out.println("");
            }
        } catch (Exception e) {
            System.out.println(e + " in setOutputList()");
        }
    }

    public void boundaryTest(int min, int max) {
        try {
            head.setText("Boundary Value Analysis");
            int inputs[] = t.getInputs(), n = t.getInputNo(), i, j, k;
            String str[] = new String[n + 2];
            str[0] = "S. No.";
            for (i = 1; i <= n; i++) {
                str[i] = "" + (char) inputs[i - 1];
            }
            str[n + 1] = "Expected Output";
            //System.out.println("inputs: ");
            //p.printMatrix(t.getInputs(), t.getInputNo());
            //data = new javax.swing.JTable(t.getInputNo()*4+1, t.getInputNo());

            int val[] = {min, min + 1, max - 1, max, (min + max) / 2};
            Object obj[][] = new Object[4 * n + 1][n + 2];
            k = (min + max) / 2;
            for (i = 0; i < 4 * n + 1; i++) {
                obj[i][0] = (i + 1) + ". ";
                for (j = 0; j < n; j++) {
                    obj[i][j + 1] = "" + k;
                    if (t.getVarType(str[j + 1].charAt(0)) == 1) {
                        obj[i][j + 1] = "" + (char) k;
                    }
                }
                obj[i][j + 1] = "Valid";
            }

            i = k = 0;
            while (i < 4 * n) {
                for (j = 0; j < 4; j++) {
                    obj[i][k + 1] = "" + val[j];
                    if (t.getVarType(str[k + 1].charAt(0)) == 1) {
                        obj[i][k + 1] = "" + (char) val[j];
                    }
                    i++;
                }
                k++;
            }

            setOutput(obj, 4 * n + 1, n);

            data.setModel(new javax.swing.table.DefaultTableModel(obj, str));
            cases.setText(cases.getText() + (4 * n + 1));
        } catch (Exception e) {
            System.out.println(e + " in boundaryTest()");
        }
    }

    public void robustTest(int min, int max) {
        head.setText("Robustness Test Cases");
        int inputs[] = t.getInputs(), n = t.getInputNo(), i, j, k;
        String str[] = new String[n + 2];
        str[0] = "S. No.";
        for (i = 1; i <= n; i++) {
            str[i] = "" + (char) inputs[i - 1];
        }
        str[n + 1] = "Expected Output";
        //System.out.println("inputs: ");
        //p.printMatrix(t.getInputs(), t.getInputNo());
        //data = new javax.swing.JTable(t.getInputNo()*4+1, t.getInputNo());

        int val[] = {min - 1, min, min + 1, max - 1, max, max + 1, (min + max) / 2};
        Object obj[][] = new Object[6 * n + 1][n + 2];
        k = (min + max) / 2;
        for (i = 0; i < 6 * n + 1; i++) {
            obj[i][0] = (i + 1) + ". ";
            for (j = 0; j < n; j++) {
                obj[i][j + 1] = "" + k;
                if (t.getVarType(str[j + 1].charAt(0)) == 1) {
                    obj[i][j + 1] = "" + (char) k;
                }
            }
            if ((i % 6) > 0 && (i % 6) < 5) {
                obj[i][j + 1] = "Valid";
            } else {
                obj[i][j + 1] = "Invalid";
            }
        }

        i = k = 0;
        while (i < 6 * n) {
            for (j = 0; j < 6; j++) {
                obj[i][k + 1] = "" + val[j];
                if (t.getVarType(str[k + 1].charAt(0)) == 1) {
                    obj[i][k + 1] = "" + (char) val[j];
                }
                i++;
            }
            k++;
        }

        setOutput(obj, 6 * n + 1, n);

        data.setModel(new javax.swing.table.DefaultTableModel(obj, str));
        cases.setText(cases.getText() + (6 * n + 1));
    }

    public void worstTest(int min, int max) {
        head.setText("Worst-Case Test Cases");
        int inputs[] = t.getInputs(), n = t.getInputNo(), i, j;
        String str[] = new String[n + 2];
        str[0] = "S. No.";
        for (i = 1; i <= n; i++) {
            str[i] = "" + (char) inputs[i - 1];
        }
        str[n + 1] = "Expected Output";
        //System.out.println("inputs: ");
        //p.printMatrix(t.getInputs(), t.getInputNo());
        //data = new javax.swing.JTable(t.getInputNo()*4+1, t.getInputNo());

        int val[] = {min, min + 1, max - 1, max, (min + max) / 2};

        System.out.println("Before str[][]");
        String s[][] = new String[n][5];
        for (i = 0; i < n; i++) {
            for (j = 0; j < 5; j++) {
                s[i][j] = "" + val[j];
                if (t.getVarType(str[i + 1].charAt(0)) == 1) {
                    s[i][j] = "" + (char) val[j];
                }
                System.out.print(s[i][j] + " ");
            }
            System.out.println("");
        }

        Permute2DArray N = new Permute2DArray();
        List<String> lst = N.combinations(s);
        System.out.println("Total no. " + lst.size());
        String obj[][] = new String[lst.size()][];

        setOutputList(lst, obj, lst.size(), n);
        data.setModel(new javax.swing.table.DefaultTableModel(obj, str));
        cases.setText(cases.getText() + (lst.size()));
    }

    public void robustworstTest(int min, int max) {
        head.setText("Robustness Worst-Case Test Cases");
        int inputs[] = t.getInputs(), n = t.getInputNo(), i, j, k;
        String str[] = new String[n + 2];
        str[0] = "S. No.";
        for (i = 1; i <= n; i++) {
            str[i] = "" + (char) inputs[i - 1];
        }
        str[n + 1] = "Expected Output";
        //System.out.println("inputs: ");
        //p.printMatrix(t.getInputs(), t.getInputNo());
        //data = new javax.swing.JTable(t.getInputNo()*4+1, t.getInputNo());

        int val[] = {min - 1, min, min + 1, max - 1, max, max + 1, (min + max) / 2};

        System.out.println("Before str[][]");
        String s[][] = new String[n][7];
        for (i = 0; i < n; i++) {
            for (j = 0; j < 7; j++) {
                s[i][j] = "" + val[j];
                if (t.getVarType(str[i + 1].charAt(0)) == 1) {
                    s[i][j] = "" + (char) val[j];
                }
                System.out.print(s[i][j] + " ");
            }
            System.out.println("");
        }

        Permute2DArray N = new Permute2DArray();
        List<String> lst = N.combinations(s);
        System.out.println("Total no. " + lst.size());
        String obj[][] = new String[lst.size()][];

        /*for (i = 0; i < lst.size(); i++) {
         if (lst.get(i).contains("" + (min - 1)) || lst.get(i).contains("" + (max + 1))) {
         obj[i] = ((i + 1) + ". " + lst.get(i).concat(" Invalid")).split("\\s+");
         } else {
         obj[i] = ((i + 1) + ". " + lst.get(i).concat(" Valid")).split("\\s+");
         }
         }*/
        setOutputList(lst, obj, lst.size(), n);
        data.setModel(new javax.swing.table.DefaultTableModel(obj, str));
        cases.setText(cases.getText() + (lst.size()));
    }

    public void eqClassTest(int min, int max) throws Exception {
        head.setText("Equivalence Class Test Cases");
        int inputs[] = t.getInputs(), n = t.getInputNo(), i, j, k;
        String str[] = new String[n + 2];
        str[0] = "S. No.";
        for (i = 1; i <= n; i++) {
            str[i] = "" + (char) inputs[i - 1];
        }
        str[n + 1] = "Expected Output";

        int val[] = {min - 1, max + 1, (min + max) / 2};

        System.out.println("Before str[][]");
        String s[][] = new String[n][3];
        for (i = 0; i < n; i++) {
            for (j = 0; j < 3; j++) {
                s[i][j] = "" + val[j];
                if (t.getVarType(str[i + 1].charAt(0)) == 1) {
                    s[i][j] = "" + (char) val[j];
                }
                System.out.print(s[i][j] + " ");
            }
            System.out.println("");
        }

        Permute2DArray N = new Permute2DArray();
        List<String> lst = N.combinations(s);
        System.out.println("Total no. " + lst.size());
        String obj[][] = new String[lst.size()][];

        String temp, ts, tt;
        for (i = 0; i < lst.size(); i++) {
            E.init();
            E.giveInput(lst.get(i));
            E.stdinClose();
            temp = E.getOutput();
            if (temp.equals("")) {
                temp = "Invalid Input";
            }

            obj[i] = ("I" + (i + 1) + ". " + lst.get(i).concat("o")).split("\\s+");
            obj[i][obj[i].length - 1] = temp;
            E.processWait();
        }

        STesting st = new STesting();
        st.setHead("Equivalence Class Testing");
        st.setSource(source.getText());
        st.setComp("Total No. of equivalence classes: " + (int) pow(3, n));

        temp = "\nInput Domains:\n\n";
        for (i = 0; i < lst.size(); i++) {
            temp += ("  I" + (i + 1) + " = { ");
            ts = tt = "";
            for (j = 1; j <= n; j++) {
                if (toInt(obj[i][j]) < min) {
                    ts += (str[j] + " < " + min + "  and  ");
                    tt += (str[j] + " is invalid  and  ");
                } else if (toInt(obj[i][j]) > max) {
                    ts += (str[j] + " > " + max + "  and  ");
                    tt += (str[j] + " is invalid  and  ");
                } else {
                    ts += (min + " <= " + str[j] + " <= " + max + "  and  ");
                    tt += (str[j] + " is valid  and  ");
                }
            }
            ts = ts.substring(0, ts.length() - 7);
            tt = tt.substring(0, tt.length() - 7);
            temp += (ts + " }    ( " + tt + " ) \n");
            st.setCode(temp);
        }

        temp += "\nOutput Domains:\n\n";
        k = 1;
        for (i = 0; i < lst.size(); i++) {
            tt = ("  O" + k + " = { ");
            ts = "< " + str[1];
            for (j = 2; j <= n; j++) {
                ts += (", " + str[j]);
            }
            ts += " >  :  ";
            if (!temp.contains(obj[i][obj[i].length - 1])) {
                temp += (tt + ts + obj[i][obj[i].length - 1] + " }\n");
                k++;
            }
        }
        st.setCode(temp);
        st.setVisible(true);
        data.setModel(new javax.swing.table.DefaultTableModel(obj, str));
        cases.setText(cases.getText() + (lst.size()));
    }

    public void setTable(Object obj[][], String s[]) {
        /*for (int i = 0; i < obj.length; i++) {
            for (int j = 0; j < obj[i].length; j++) {
                System.out.print(obj[i][j] + " ");
            }
            System.out.println("");
        }*/
        data.setModel(new javax.swing.table.DefaultTableModel(obj, s));
    }

    public void setColumnWidth(int n, int m) {
        data.getColumnModel().getColumn(n).setPreferredWidth(m);
    }

    public void setCases(int n) {
        cases.setText(cases.getText() + n);
    }

    public void setHead(String s) {
        head.setText(s);
    }

    public void setSource(String s) {
        source.setText(source.getText() + s);
    }

    public int toInt(String s) {
        int i = 0, j = 0;
        if (s.charAt(0) == '-') {
            j = 1;
        }
        for (; j < s.length(); j++) {
            i = (i * 10) + (s.charAt(j) - '0');
        }
        if(s.charAt(0)=='-') {
            i=-i;
        }

        if (s.length() == 1) {
            if ((s.charAt(0) >= 'a' && s.charAt(0) <= 'z') || (s.charAt(0) >= 'A' && s.charAt(0) <= 'Z')) {
                return (int) s.charAt(0);
            }
        }

        return i;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTesting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTesting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTesting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTesting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FTesting F = new FTesting();
                //F.boundaryTest();
                F.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cases;
    private javax.swing.JTable data;
    private javax.swing.JLabel head;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel source;
    // End of variables declaration//GEN-END:variables
}
