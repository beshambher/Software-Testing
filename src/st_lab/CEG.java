/**
 * @Project Title: Software Testing Lab
 *
 * @Submitted By: Beshambher Chaukhwan (2K13/SE/024)
 */
package st_lab;

import java.awt.*;
import java.awt.geom.AffineTransform;
import javax.swing.*;
import javax.script.*;

/**
 *
 * @author bishu
 */
public class CEG extends javax.swing.JFrame {

    /**
     * Creates new form test
     *
     * @param CP
     */
    public CEG(CEGPane CP) {
        initComponents(CP);
        ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\src\\icons\\test_icon.gif");
        setIconImage(icon.getImage());
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        setTitle("Cause Effect Graph");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(CEGPane CPanel) {
        JScrollPane scroll = CPanel.scroll;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </jeditor-fold>                                 
}

class CEGPane extends JPanel {

    JScrollPane scroll;
    private javax.swing.JButton zoomin = new javax.swing.JButton();
    private javax.swing.JButton zoomout = new javax.swing.JButton();
    private int zoom = 0, c = 0, e = 0, r = 15, q = 0, n = 0;
    private String data[], cond[];
    public String fname;
    private coor C[];
    private int m[][];
    private Object obj[][];
    //Initialization
    ScriptEngineManager mgr = new ScriptEngineManager();
    ScriptEngine engine = mgr.getEngineByName("JavaScript");

    public CEGPane() {
        setBackground(Color.white);
        setPreferredSize(new Dimension(500, 1300));
        initComponents();
        scroll = new javax.swing.JScrollPane(this);
    }

    public class coor {

        int x, y;

        coor() {
            x = y = 0;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        zoomin = new javax.swing.JButton();
        zoomout = new javax.swing.JButton();

        zoomin.setText("+");
        zoomin.setToolTipText("Zoom in");
        zoomin.setSize(20, 10);
        zoomin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoominMouseClicked(evt);
            }
        });

        zoomout.setText("-");
        zoomout.setToolTipText("Zoom out");
        zoomout.setSize(20, 10);
        zoomout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoomoutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(zoomin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomout))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(zoomin)
                                .addComponent(zoomout))
                )
        );
    }// </editor-fold>                        

    private void zoomoutMouseClicked(java.awt.event.MouseEvent evt) {
        setPreferredSize(new Dimension(getWidth() - 100, getHeight() - 100));
        zoom = -100;
    }

    private void zoominMouseClicked(java.awt.event.MouseEvent evt) {
        setPreferredSize(new Dimension(getWidth() + 100, getHeight() + 100));
        zoom = 100;
    }

    public void drawCircle(Graphics g, int x, int y, int r, String s) {
        if (s.length() == 1) {
            g.drawString(s, x - 3, y + 4);
        } else {
            g.drawString(s, x - 6, y + 4);
        }
        g.drawOval(x - r, y - r, r * 2, r * 2);
    }

    public void drawArrow(Graphics g1, int x, int y, int xx, int yy) {
        Graphics2D g = (Graphics2D) g1.create();
        double dx = xx - x, dy = yy - y;
        double a = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x, y);
        at.concatenate(AffineTransform.getRotateInstance(a));
        g.transform(at);
        g.drawLine(0, 0, len, 0);
        g.fillPolygon(new int[]{len, len - 4, len - 4, len},
                new int[]{0, -4, 4, 0}, 4);
    }

    void putpixel2(Graphics g, int x, int y, int x1, int y1, int x2, int y2) {
        if (x >= x1 && x <= x2 && y >= y2 && y <= y1) {
            g.drawLine(x, y, x, y);
            //g.drawString(".", x, y);
        } else {
            //putpixel(x, y, 7);
        }
    }

    void setpixel(Graphics g, int xc, int yc, int x, int y, int x1, int y1, int x2, int y2) {
        putpixel2(g, xc + x, yc + y, x1, y1, x2, y2);
        putpixel2(g, xc + x, yc - y, x1, y1, x2, y2);
        putpixel2(g, xc - x, yc + y, x1, y1, x2, y2);
        putpixel2(g, xc - x, yc - y, x1, y1, x2, y2);
        putpixel2(g, xc + y, yc + x, x1, y1, x2, y2);
        putpixel2(g, xc + y, yc - x, x1, y1, x2, y2);
        putpixel2(g, xc - y, yc + x, x1, y1, x2, y2);
        putpixel2(g, xc - y, yc - x, x1, y1, x2, y2);
    }

    void midPointCircle(Graphics g, int xc, int yc, int r, int x1, int y1, int x2, int y2) {
        int p = 1 - r;
        int x = 0, y = r;

        setpixel(g, xc, yc, x, y, x1, y1, x2, y2);
        while (x < y) {
            x++;
            if (p < 0) {
                p += 2 * x + 1;
            } else {
                y--;
                p += 2 * (x - y) + 1;
            }
            //if(x>=x1 && x<=x2 && y>=y1 && y<=y2)
            setpixel(g, xc, yc, x, y, x1, y1, x2, y2);
        }
    }

    void drawArc(Graphics g, int x, int y, int y1, int y2, int r) {
        y1 = (y >= y1) ? (y - r) : (y + r);
        y2 = (y >= y2) ? (y - r) : (y + r);
        midPointCircle(g, x, y, r, x - r, y1, x - r, y2);
    }

    public void setLO(int l, int o, int g) {
        c = l;
        e = o;
        q = g;
        n = l + o;
        C = new coor[n];
        for (int i = 0; i < (n); i++) {
            C[i] = new coor();
        }
        System.out.println("c = " + c + " e = " + e + " q = " + q + " n = " + n);
    }

    public void setData(Object d[][], String s[], String t[][]) throws Exception {
        int j = 0;
        obj = d;
        cond = new String[c - q];
        data = new String[e - 1];

        for (int i = q; i < c; i++) {
            System.out.println(d[i][0]);
            cond[j] = d[i][0] + "";
            j++;
        }
        j = 0;
        for (int i = c + 1; i < c + e + 1; i++) {
            if (!(d[i][0] + "").toLowerCase().contains("out of range")) {
                data[j] = d[i][0] + "";
                System.out.println(d[i][0]);
                j++;
            }
        }
        for (Object[] obj1 : obj) {
            for (Object ob1 : obj1) {
                System.out.print(ob1 + " ");
            }
            System.out.println("");
        }
        m = new int[c - q][e - 1];
        for (int i = q; i < c; i++) {
            for (int k = q; k < q + e; k++) {
                switch (obj[i][k].toString()) {
                    case "F":
                        j = 2;
                        break;
                    case "T":
                        j = 1;
                        break;
                    default:
                        j = 0;
                        break;
                }
                for (int g = c + 1; g < c + e + 1; g++) {
                    if (obj[g][k].toString().equals("X")) {
                        for (int h = 0; h < e - 1; h++) {
                            if (data[h].equals(obj[g][0].toString())) {
                                m[i - q][h] = j;
                            }
                        }
                    }
                }
            }
        }
        System.out.println("Matrix m:");
        for (int i = 0; i < c - q; i++) {
            for (int k = 0; k < e - 1; k++) {
                System.out.print(m[i][k] + " ");
            }
            System.out.println("");
        }

        String Head[] = new String[obj[0].length - q];
        Head[0] = "Conditions";
        for (int y = 1; y < obj[0].length - q; y++) {
            Head[y] = y + "";
        }
        for (int i = 0; i < q; i++) {
            for (j = 0; j < obj[i].length; j++) {
                obj[i][j] = null;
            }
        }
        for (int i = q; i < c; i++) {
            obj[i][0] = "c" + (i - q + 1) + ": " + obj[i][0];
            for (j = q + 1; j < obj[i].length; j++) {
                obj[i][j - q] = obj[i][j];
            }
        }
        int k = 1;
        for (int i = c; i < c + e + 1; i++) {
            if ((obj[i][0] + "").toLowerCase().contains("out of range")
                    || (obj[i][0] + "").toLowerCase().contains("rule count")) {
                for (j = 0; j < obj[i].length; j++) {
                    obj[i][j] = null;
                }
            } else {
                obj[i][0] = "e" + (k) + ": " + obj[i][0];
                for (j = q + 1; j < obj[i].length; j++) {
                    obj[i][j - q] = obj[i][j];
                }
                k++;
            }
        }
        k=0;
        for (int i = 0; i < c + e + 1; i++) {
            if(i==c-q) continue;
            if (obj[i][0] == null) {
                for (j = i + 1; j < c + e + 1; j++) {
                    if (obj[j][0] != null) {
                        Object tmpo[] = obj[i];
                        obj[i] = obj[j];
                        obj[j] = tmpo;
                        k++;
                        break;
                    }
                }
            }
        }

        FTesting FT = new FTesting();
        FT.setHead("Cause-Effect Graphing");
        FT.setCases(Head.length - 1);
        FT.setSource(fname);
        FT.setTable(obj, Head);
        FT.setColumnWidth(0, 250);
        FT.setVisible(true);
        //Thread.sleep(10000);

        c -= q;
        e -= 1;
    }

    @Override
    public void paintComponent(Graphics g) {
        setSize(new Dimension(getWidth() + zoom, getHeight() + zoom));
        validate();
        super.paintComponent(g);
        int x = getWidth() / 2;
        make(g);
    }

    private void make(Graphics g) {
        int x = getWidth() / 2, y = 60;
        y = ((c < e) ? (((e - c) / 2) * 80) : 0) + 60;
        for (int i = 0; i < c; i++) {
            drawCircle(g, x - (x / 2), y, r, "c" + (i + 1));
            C[i].x = x - (x / 2);
            C[i].y = y;
            y += 120;
        }
        y = ((c > e) ? (((c - e) / 2) * 80) : 0) + 60;
        for (int i = 0; i < e; i++) {
            drawCircle(g, x + (x / 2), y, r, "e" + (i + 1));
            drawCircle(g, x + (x / 2) - (x / 4), y, r, "");
            C[c + i].x = x + (x / 2) - (x / 4);
            C[c + i].y = y;
            C[c + e + i].x = x + (x / 2);
            C[c + e + i].y = y;
            g.drawLine(x + (x / 2) - (x / 4) + r, y, x + (x / 2) - r, y);
            y += 100;
        }

        for (int i = 0; i < c; i++) {
            //int k = -1;
            for (int j = 0; j < e; j++) {
                if (m[i][j] == 1) {
                    g.drawLine(C[i].x + r, C[i].y, C[c + j].x - r, C[c + j].y);
                    //if (k > -1) {
                    //   drawArc(g, C[c + j].x - r, C[c + j].y, C[i].y, C[k].y, 15);
                    //}
                    //k = j;
                } else if (m[i][j] == 2) {
                    g.drawLine(C[i].x + r, C[i].y, C[c + j].x - r, C[c + j].y);
                    int x1 = (C[i].x + C[c + j].x) / 2, y1 = (C[i].y + C[c + j].y) / 2;
                    not(g, x1, y1);
                }
            }
        }

    }

    private void not(Graphics g, int x, int y) {
        g.drawLine(x + 3, y - 5, x - 3, y + 5);
        g.drawLine(x + 3, y - 5, x + 6, y);
        g.drawLine(x - 3, y + 5, x - 6, y);
    }
}
