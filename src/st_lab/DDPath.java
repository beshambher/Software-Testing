/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package st_lab;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Stack;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author bishu
 */
public class DDPath extends javax.swing.JFrame {

    /**
     * Creates new form test
     *
     * @param CP
     */
    public DDPath(DDPane CP) {
        initComponents(CP);
        CP.setPreferredSize(new Dimension(1000, CP.getMatrixSize() * 50));
        ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\src\\icons\\test_icon.gif");
        setIconImage(icon.getImage());
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        setTitle("DD Path Graph");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(DDPane CPanel) {
        JScrollPane scroll = CPanel.scroll;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </jeditor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            System.err.println(ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DDPath(new DDPane()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
}

class DDPane extends JPanel {

    JScrollPane scroll;
    private javax.swing.JButton zoomin = new javax.swing.JButton();
    private javax.swing.JButton zoomout = new javax.swing.JButton();
    private int zoom = 0, line = 0;

    public class coor {

        int x, y, n, mx, my;

        public coor() {
            x = y = n = my = 0;
            mx = getWidth();
        }
    }

    public DDPane() {
        setBackground(Color.white);
        setPreferredSize(new Dimension(1000, 2500));
        initComponents();
        scroll = new javax.swing.JScrollPane(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        zoomin = new javax.swing.JButton();
        zoomout = new javax.swing.JButton();

        zoomin.setText("+");
        zoomin.setToolTipText("Zoom in");
        zoomin.setSize(20, 10);
        zoomin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoominMouseClicked(evt);
            }
        });

        zoomout.setText("-");
        zoomout.setToolTipText("Zoom out");
        zoomout.setSize(20, 10);
        zoomout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoomoutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(zoomin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomout))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(zoomin)
                                .addComponent(zoomout))
                )
        );
    }// </editor-fold>                        

    private void zoomoutMouseClicked(java.awt.event.MouseEvent evt) {
        setPreferredSize(new Dimension(getWidth() - 100, getHeight() - 100));
        zoom = -100;
    }

    private void zoominMouseClicked(java.awt.event.MouseEvent evt) {
        setPreferredSize(new Dimension(getWidth() + 100, getHeight() + 100));
        zoom = 100;
    }

    private int M[][] = new int[100][100], n, k;
    private coor c[];
    private String pr = "";
    private File file;

    public void setMatrix(int[][] m, int n) {
        try {
            int i, j, pr = 1;
            coor c[][] = new coor[n][n];
            for (i = 0; i < n; i++) {
                for (j = 0; j < n; j++) {
                    c[i][j] = new coor();
                }
            }
            Queue st = new Queue();
            int d = 0;
            st.add(1);
            M = m;
            while (!st.empty()) {
                //c[d][0].y = st.pop();
                i = st.pop();
                System.out.println("i = " + i/*+" j = " + c[d][0].y*/);
                if (i == n - 1) {
                    continue;
                }

                j = i;
                c[d][0].mx = i;
                pr = i;
                while (getOutDegree(j) == 1 /*&& getInDegree(j) == 1*/) {
                    pr = j;
                    j = getIndex(j, 1);
                    if (getInDegree(j) > 1) {
                        break;
                    }
                }
                //j--;
                if (j > i + 1) {
                    c[d][d + 1].x = 1;
                    System.out.print(" j= " + j);
                    st.add(j);
                    c[d][0].my = pr;
                } else {
                    c[d][d + 1].x = 1;
                    c[d][0].my = i + 1;
                    for (int l = 1; l < n; l++) {
                        if (M[i][l] == 1) {
                            st.add(l);
                        }
                    }
                }
                d++;
            }
            System.out.println("d = " + d);
            /*for (i = 0; i < n; i++) {
             for (j = 0; j < n; j++) {
             System.out.print(c[i][j].x + " ");
             }
             System.out.println("");
             }*/
            for (j = 0; j < n; j++) {
                System.out.println(j + " range: " + c[j][0].mx + " - "
                        + c[j][0].my + "\t Parent: " + c[j][0].y);
            }
            //n = d;
            i = 1;
            j = 0;
            M = new int[100][100];

        } catch (Exception e) {
            System.out.println(e + " Error in setMatrix");
        }
    }

    public void setMatrixSize(int N) {
        n = N;
    }

    public void setFileParam(File F) {
        file = F;
    }

    public int getMatrixSize() {
        return n;
    }

    public String inc() {
        String s = "";
        s += k;
        k++;
        return s;
    }

    public String inc2(int J) {
        String s = "";
        s += J;
        return s;
    }

    public void drawCircle(Graphics g, int x, int y, int r, String s) {
        if (s.length() == 1) {
            g.drawString(s, x - 4, y + 5);
        } else {
            g.drawString(s, x - 10, y + 5);
        }
        g.drawOval(x - r, y - r, r * 2, r * 2);
    }

    public void drawArrow(Graphics g1, int x, int y, int xx, int yy) {
        Graphics2D g = (Graphics2D) g1.create();
        double dx = xx - x, dy = yy - y;
        double a = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x, y);
        at.concatenate(AffineTransform.getRotateInstance(a));
        g.transform(at);
        g.drawLine(0, 0, len, 0);
        g.fillPolygon(new int[]{len, len - 6, len - 6, len},
                new int[]{0, -4, 4, 0}, 4);
    }

    @Override
    public void paintComponent(Graphics g) {
        setSize(new Dimension(getWidth() + zoom, getHeight() + zoom));
        validate();
        super.paintComponent(g);
        int x = getWidth() / 2;
        makeDD(g);
    }

    public int getIndex(int I, int s) {
        int sm = 0;
        for (int a = 0; a < n; a++) {
            sm += M[I][a];
            if (M[I][a] == 1 && sm == s) {
                return a;
            }
        }
        return 0;
    }

    public void makeDD(Graphics g) {
        try {
            int i, j, x = getWidth() / 2;
            c = new coor[n];
            //f= new int[n];
            c[0] = new coor();
            c[0].x = x;
            c[0].y = 50;
            //f[0]=1;
            for (i = 1; i < n; i++) {
                c[i] = new coor();
                c[i].x = x;
                c[i].n = i;
            }

            func2(g, 0, 1, 0, getWidth(), 100);
            for (i = 1; i < n; i++) {
                c[i].x = (c[i].mx + c[i].my) / 2;
                for (j = 1; j < n; j++) {
                    if (i != j && c[i].x == c[j].x && c[i].y == c[j].y) {
                        c[j].x += 40;
                        c[j].y += 25;
                    }
                }
            }

            drawCircle(g, c[0].x, c[0].y, 15, "S");
            drawArrow(g, c[0].x, c[0].y + 15, c[1].x, c[1].y - 15);

            for (i = 1; i < n; i++) {
                for (j = 1; j < n; j++) {
                    if (M[i][j] == 1) {
                        drawArrow(g, c[i].x, c[i].y + 15, c[j].x, c[j].y - 15);
                    }
                }
                drawCircle(g, c[i].x, c[i].y, 15, "N" + inc2(c[i].n));
                //System.out.println(c[i].n+": "+c[i].x+", "+c[i].y);
            }

            drawArrow(g, c[i - 1].x, c[i - 1].y + 15, c[i - 1].x, c[i - 1].y + 35);
            drawCircle(g, c[i - 1].x, c[i - 1].y + 50, 15, "D");

        } catch (Exception e) {
            System.out.println("ERROR!! in makeDD() " + e);
        }
    }

    public void func2(Graphics g, int I, int J, int xst, int xend, int y) {
        try {
            //super.paintComponent(g);
            //int d: 0=mid, 1=right, 2=left.
            int sm = 0, mid = (xend - xst) / 2, i, j = 0;

            if (J == n - 1) {
                if (c[J].mx > (xst + mid)) {
                    c[J].mx = xst + mid;
                }
                if (c[J].my < (xst + mid)) {
                    c[J].my = xst + mid;
                }
                if (c[J].y < y) {
                    c[J].y = y;
                }
                return;
            }

            for (i = 0; i < n; i++) {
                sm += M[J][i];
            }
            //System.out.print("(i, j)= ("+I+", "+J+")  (xst, mid, xend, y)=("+xst+", "+mid+", "+xend+", "+y+") sm="+sm);
            if (sm == 0) {
                return;
            }
            //System.out.println(" circle "+J);

            if (c[J].mx > (xst + mid)) {
                c[J].mx = xst + mid;
            }
            if (c[J].my < (xst + mid)) {
                c[J].my = xst + mid;
            }
            if (c[J].y < y) {
                c[J].y = y;
            }

            switch (sm) {
                case 1:
                    j = getIndex(J, 1);// System.out.println(" circle "+j);//": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    // drawCircle(g, mid, y, 13, inc2(j));
                    if (j < J) { //System.out.println(J+" "+j);
                        //drawArrow(g, c[J].x - 3, c[J].y - 13, c[j].x - 13, c[j].y + 5);
                    } else {
                        //drawArrow(g, xst + mid + 3, y + 13, xst + mid + 3, y + 50 - 13);
                        func2(g, J, j, xst, xend, y + 50);
                    }
                    break;
                case 2:
                    //drawArrow(g, xst + mid + 3, y + 13, xst + (mid / 2) + 3, y + 50 - 13);
                    j = getIndex(J, 1);// System.out.println("Circle "+j);//+": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    //drawCircle(g, mid, y, 13, inc2(j));
                    if (j > J) {
                        func2(g, J, j, xst, xst + mid, y + 50);
                    }
                    //drawArrow(g, xst + mid + 3, y + 13, xend - (mid / 2) + 3, y + 50 - 13);
                    j = getIndex(J, 2); //System.out.println("Circle "+j);//+": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    //drawCircle(g, mid, y, 13, inc2(j));
                    if (j > J) {
                        func2(g, J, j, xst + mid, xend, y + 50);
                    }
                    break;
            }
            if (sm > 2) {
                int xm = (xend - xst) / sm;
                for (int v = 1; v <= sm; v++) {
                    //drawArrow(g, xst + mid + 3, y + 13, xst + (v - 1) * xm + (xm / 2) + 3, y + 50 - 13);
                    j = getIndex(J, v); //System.out.println("j="+j);
                    //drawCircle(g, xst + (v - 1) * xm + (xm / 2) + 3, y + 50, 13, inc2(j));

                    if (c[J].mx > (xst + (v - 1) * xm + (xm / 2) + 3)) {
                        c[J].mx = xst + (v - 1) * xm + (xm / 2) + 3;
                    }
                    if (c[J].my < (xst + (v - 1) * xm + (xm / 2) + 3)) {
                        c[J].my = xst + (v - 1) * xm + (xm / 2) + 3;
                    }
                    if (c[J].y < (y + 50)) {
                        c[J].y = y + 50;
                    }
                    if (j > J) {
                        func2(g, J, j, xst + (v - 1) * xm, xst + v * xm, y + 120);
                    }
                    //drawArrow(g, xst + (v - 1) * xm + (xm / 2) + 3, y + 83, xst + mid + (v - 2), y + 140 - 13);
                }
            }
        } catch (Exception e) {
            System.out.println("in func" + e);
        }
    }

    public int getOutDegree(int j) {
        int ii = 0;
        for (int ki = 0; ki < n; ki++) {
            ii += M[j][ki];
        }
        return ii;
    }

    public int getInDegree(int j) {
        int ii = 0;
        for (int ki = 0; ki < n; ki++) {
            ii += M[ki][j];
        }
        return ii;
    }

    /**
     * Function getDD():
     *
     * @param f This function scan the source code of selected file generate the
     * adjacency matrix of its DDPath Graph by reading the source code line by
     * line.
     */
    public void getDD() {
        String s;
        Stack st = new Stack();
        int i, j, len;
        try {
            BufferedReader f = new BufferedReader(new FileReader(file));
            M[line][line + 1] = 1;

            while (st.empty()) {
                s = f.readLine().trim();
                len = s.length();
                if (len > 0) {
                    if (s.charAt(0) == '{' || s.charAt(len - 1) == '{') {
                        line++;
                        M[line][line + 1] = 1;
                        st.add(line);
                        st.add('m');
                    }
                }
            }
            while (!st.empty()) {
                s = f.readLine().trim();
                len = s.length();
                line++;
                if (len > 0 && s.charAt(0) != '/') {
                    i = 0;
                    if ((len > 6) && s.contains("switch")) {
                        if (s.charAt(len - 1) != '{') {
                            M[line][line + 1] = 1;
                            s = f.readLine().trim();
                            len = s.length();
                            line++;
                        }
                        j = line;
                        st.add('s');
                        while (s.charAt(0) != '}' || s.charAt(len - 1) != '}') {
                            s = f.readLine().trim();
                            len = s.length();
                            line++;
                            if (s.contains("case") || s.contains("default")) {
                                M[j][line] = 1;
                            }
                            if (s.contains("break")) {
                                st.add(line);
                            } else {
                                M[line][line + 1] = 1;
                            }
                        }
                        while (!st.lastElement().toString().equals("s")) {
                            j = toInt(st.pop().toString());
                            M[j][line] = 1;
                        }
                        st.pop();
                    } else if ((len > 1) && s.contains("do")) {
                        st.add(line);
                        if (s.charAt(len - 1) == '{') {
                            st.add('d');
                            M[line][line + 1] = 1;
                        } else {
                            M[line][line + 1] = 1;
                            s = f.readLine().trim();
                            line++;
                            M[line][line + 1] = 1;
                            if (s.charAt(0) == '{') {
                                st.add('d');
                            } else {
                                M[toInt(st.pop().toString())][line] = 1;
                            }
                        }
                    } else if ((len > 3) && s.contains("for")) {
                        st.add(line);
                        if (s.charAt(len - 1) == '{') {
                            st.add('f');
                            M[line][line + 1] = 1;
                        } else {
                            M[line][line + 1] = 1;
                            s = f.readLine().trim();
                            line++;
                            M[line][line + 1] = 1;
                            if (s.charAt(0) == '{') {
                                st.add('f');
                            } else {
                                M[toInt(st.pop().toString())][line] = 1;
                            }
                        }
                    } else if ((len > 5) && s.contains("while") && s.charAt(len - 1) != ';') {
                        st.add(line);
                        if (s.charAt(len - 1) == '{') {
                            st.add('w');
                            M[line][line + 1] = 1;
                        } else {
                            M[line][line + 1] = 1;
                            s = f.readLine().trim();
                            line++;
                            M[line][line + 1] = 1;
                            if (s.charAt(0) == '{') {
                                st.add('w');
                            } else {
                                M[toInt(st.pop().toString())][line] = 1;
                            }
                        }
                    } else if ((len > 6) && s.contains("else if")) {
                        if (s.charAt(0) == '}') {
                            funcBrace(st, f, s);
                        }
                        line--;
                        st.add("ei");
                        st.add(line);
                        if (s.charAt(len - 1) == '{') {
                            st.add('i');
                            //M[line][line + 1] = 1;
                        } else {
                            //M[line][line + 1] = 1;
                            s = f.readLine().trim();
                            //line++;
                            //M[line][line + 1] = 1;
                            if (s.charAt(0) == '{') {
                                st.add('i');
                            } else {
                                M[toInt(st.pop().toString())][line] = 1;
                            }
                        }
                    } else if ((len > 2) && s.contains("if")) {
                        st.add(line);
                        if (s.charAt(len - 1) == '{') {
                            st.add('i');
                            M[line][line + 1] = 1;
                        } else {
                            M[line][line + 1] = 1;
                            s = f.readLine().trim();
                            line++;
                            M[line][line + 1] = 1;
                            if (s.charAt(0) == '{') {
                                st.add('i');
                            } else {
                                M[toInt(st.pop().toString())][line] = 1;
                            }
                        }
                    } else if ((len > 3) && s.contains("else")) {
                        if (s.charAt(0) == '}') {
                            funcBrace(st, f, s);
                        }
                        line--;
                        if (s.charAt(len - 1) == '{') {
                            st.add('e');
                            //M[line][line + 1] = 1;
                        } else {
                            //M[line][line + 1] = 1;
                            s = f.readLine().trim();
                            //line++;
                            //M[line][line + 1] = 1;
                            if (s.charAt(0) == '{') {
                                st.add('e');
                            }
                        }
                    } else if ((len > 0) && (s.charAt(0) == '}' || s.charAt(len - 1) == '}')) {
                        if (st.lastElement().toString().equals("m")) {
                            st.removeAllElements();
                            M[line++][line] = 1;
                            M[line++][line] = 1;
                        } else if (st.lastElement().toString().charAt(0) == 'e') {
                            st.pop();
                            j = toInt(st.pop().toString());
                            M[j][line + 1] = 1;
                            M[line][line + 1] = 1;
                            while (st.lastElement().toString().equals("ei")) {
                                st.pop();
                                j = toInt(st.pop().toString());
                                M[j][line + 1] = 1;
                            }
                        } else if (st.lastElement().toString().charAt(0) == 'i') {
                            st.pop();
                            j = toInt(st.pop().toString());
                            M[j][line + 1] = 1;
                            if ((len > 3) && s.contains("else")) {
                                st.add(line);
                            } else {
                                f.mark(line);
                                s = f.readLine().trim();
                                len = s.length();
                                if ((len > 3) && (s.contains("else"))) {
                                    st.add(line);
                                } else {
                                    M[line][line + 1] = 1;
                                }
                                f.reset();
                            }
                        } else if (st.lastElement().toString().charAt(0) == 'w'
                                || st.lastElement().toString().charAt(0) == 'f') {
                            st.pop();
                            j = toInt(st.pop().toString());
                            M[j][line + 1] = 1;
                            M[line][j] = 1;
                        } else if (st.lastElement().toString().charAt(0) == 'd') {
                            st.pop();
                            j = toInt(st.pop().toString());
                            M[line][j] = 1;
                            M[line][line + 1] = 1;
                        } else {
                            M[line][line + 1] = 1;
                        }
                    } else if ((len > 0) && (s.charAt(i) == '{' || s.charAt(len - 1) == '{')) {
                        M[line][line + 1] = 1;
                    } else {
                        line--;
                        //M[line][line + 1] = 1;
                    }
                } else {
                    line--;
                    //M[line][line + 1] = 1;
                }
            }
            line--;
            n = line;

            System.out.println("n = " + n);
            for (i = 0; i < n; i++) {
                for (j = 0; j < n; j++) {
                    System.out.print(M[i][j] + " ");
                }
                System.out.println("");
            }
            System.out.println("end of getDD()");

        } catch (Exception e) {
            System.out.println("ERROR!!! in getDD() " + e);
        }
    }

    private void funcBrace(Stack st, BufferedReader f, String s) throws Exception {
        int j, len = s.length();
        if (st.lastElement().toString().equals("m")) {
            st.removeAllElements();
            M[line++][line] = 1;
            M[line++][line] = 1;
        } else if (st.lastElement().toString().charAt(0) == 'e') {
            st.pop();
            j = toInt(st.pop().toString());
            M[j][line] = 1;
            M[line][line + 1] = 1;
            while (st.lastElement().toString().equals("ei")) {
                st.pop();
                j = toInt(st.pop().toString());
                M[j][line + 1] = 1;
            }
        } else if (st.lastElement().toString().charAt(0) == 'i') {
            st.pop();
            j = toInt(st.pop().toString());
            M[j][line] = 1;
            M[line][line + 1] = 1;
            if ((len > 3) && s.contains("else")) {
                st.add(line);
            } else {
                f.mark(line);
                s = f.readLine().trim();
                len = s.length();
                if ((len > 3) && (s.contains("else"))) {
                    st.add(line);
                } else {
                    M[line][line + 1] = 1;
                }
                f.reset();
            }
        } else {
            M[line][line + 1] = 1;
        }
    }

    public int toInt(String s) {
        int i = 0, j = 0;
        if (s.charAt(0) == '-') {
            j = 1;
        }
        for (; j < s.length(); j++) {
            i = (i * 10) + (s.charAt(j) - '0');
        }
        if (s.charAt(0) == '-') {
            i = -i;
        }
        return i;
    }

}
